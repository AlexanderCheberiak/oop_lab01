//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Uni\2nd year\OOP\Lab01\Lab01.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lab01 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Lab01Lexer : Lexer {
	public const int
		NUMBER=1, IDENTIFIER=2, COLUMN=3, ROW=4, INT=5, EXPONENT=6, MULTIPLY=7, 
		DIVIDE=8, DIV=9, MOD=10, SUBTRACT=11, ADD=12, EQUAL=13, LESS=14, GREATER=15, 
		NOT=16, LPAREN=17, RPAREN=18, WS=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "IDENTIFIER", "COLUMN", "ROW", "INT", "EXPONENT", "MULTIPLY", 
		"DIVIDE", "DIV", "MOD", "SUBTRACT", "ADD", "EQUAL", "LESS", "GREATER", 
		"NOT", "LPAREN", "RPAREN", "WS"
	};


	public Lab01Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'^'", "'*'", "'/'", "'div'", "'mod'", 
		"'-'", "'+'", "'='", "'<'", "'>'", "'not'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "COLUMN", "ROW", "INT", "EXPONENT", "MULTIPLY", 
		"DIVIDE", "DIV", "MOD", "SUBTRACT", "ADD", "EQUAL", "LESS", "GREATER", 
		"NOT", "LPAREN", "RPAREN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lab01.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x15o\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x2\x5\x2-\n\x2\x3\x3\x6\x3\x30\n\x3\r\x3\xE\x3\x31\x3\x3\x3\x3\a\x3"+
		"\x36\n\x3\f\x3\xE\x3\x39\v\x3\x3\x4\x6\x4<\n\x4\r\x4\xE\x4=\x3\x5\x3\x5"+
		"\a\x5\x42\n\x5\f\x5\xE\x5\x45\v\x5\x3\x6\x6\x6H\n\x6\r\x6\xE\x6I\x3\a"+
		"\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x2"+
		"\x2\x2\x15\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11"+
		"\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2"+
		"\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15\x3\x2\a\x4\x2\x43\\\x63|\x3\x2\x33"+
		";\x3\x2\x32;\x3\x2\x43\\\x5\x2\v\f\xF\xF\"\"t\x2\x3\x3\x2\x2\x2\x2\x5"+
		"\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2"+
		"\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x3)\x3\x2\x2\x2\x5/\x3\x2\x2\x2\a;\x3"+
		"\x2\x2\x2\t?\x3\x2\x2\x2\vG\x3\x2\x2\x2\rK\x3\x2\x2\x2\xFM\x3\x2\x2\x2"+
		"\x11O\x3\x2\x2\x2\x13Q\x3\x2\x2\x2\x15U\x3\x2\x2\x2\x17Y\x3\x2\x2\x2\x19"+
		"[\x3\x2\x2\x2\x1B]\x3\x2\x2\x2\x1D_\x3\x2\x2\x2\x1F\x61\x3\x2\x2\x2!\x63"+
		"\x3\x2\x2\x2#g\x3\x2\x2\x2%i\x3\x2\x2\x2\'k\x3\x2\x2\x2),\x5\v\x6\x2*"+
		"+\a\x30\x2\x2+-\x5\v\x6\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-\x4\x3\x2\x2\x2"+
		".\x30\t\x2\x2\x2/.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31"+
		"\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x37\t\x3\x2\x2\x34\x36\t\x4\x2"+
		"\x2\x35\x34\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38"+
		"\x3\x2\x2\x2\x38\x6\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:<\t\x5\x2\x2;:\x3"+
		"\x2\x2\x2<=\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>\b\x3\x2\x2\x2?\x43"+
		"\t\x3\x2\x2@\x42\t\x4\x2\x2\x41@\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41"+
		"\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\n\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2"+
		"\x46H\x4\x32;\x2G\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2"+
		"\x2\x2J\f\x3\x2\x2\x2KL\a`\x2\x2L\xE\x3\x2\x2\x2MN\a,\x2\x2N\x10\x3\x2"+
		"\x2\x2OP\a\x31\x2\x2P\x12\x3\x2\x2\x2QR\a\x66\x2\x2RS\ak\x2\x2ST\ax\x2"+
		"\x2T\x14\x3\x2\x2\x2UV\ao\x2\x2VW\aq\x2\x2WX\a\x66\x2\x2X\x16\x3\x2\x2"+
		"\x2YZ\a/\x2\x2Z\x18\x3\x2\x2\x2[\\\a-\x2\x2\\\x1A\x3\x2\x2\x2]^\a?\x2"+
		"\x2^\x1C\x3\x2\x2\x2_`\a>\x2\x2`\x1E\x3\x2\x2\x2\x61\x62\a@\x2\x2\x62"+
		" \x3\x2\x2\x2\x63\x64\ap\x2\x2\x64\x65\aq\x2\x2\x65\x66\av\x2\x2\x66\""+
		"\x3\x2\x2\x2gh\a*\x2\x2h$\x3\x2\x2\x2ij\a+\x2\x2j&\x3\x2\x2\x2kl\t\x6"+
		"\x2\x2lm\x3\x2\x2\x2mn\b\x14\x2\x2n(\x3\x2\x2\x2\t\x2,\x31\x37=\x43I\x3"+
		"\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lab01
